openapi: 3.0.3
info:
  title: Banking Microservice API
  version: 1.0.0
  description: REST API to manage customers, accounts, transactions, and account statements (reports).

servers:
  - url: http://{host}:{port}/api
    variables:
      host: { default: localhost }
      port: { default: '8080' }

tags:
  - name: Customers
  - name: Accounts
  - name: Transactions
  - name: Reports

paths:
  /customers:
    get:
      tags: [Customers]
      summary: List customers
      operationId: listCustomers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/CustomerResponse' }
    post:
      tags: [Customers]
      summary: Create a customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CustomerResponse' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /customers/{customerId}:
    get:
      tags: [Customers]
      summary: Get a customer by ID
      operationId: getCustomerById
      parameters:
        - name: customerId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CustomerResponse' }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    put:
      tags: [Customers]
      summary: Update a customer (full)
      operationId: updateCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CustomerRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CustomerResponse' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    delete:
      tags: [Customers]
      summary: Delete a customer
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          schema: { type: string }
      responses:
        '204': { description: No Content }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /accounts:
    get:
      tags: [Accounts]
      summary: List accounts
      operationId: listAccounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AccountResponse' }
    post:
      tags: [Accounts]
      summary: Create an account
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AccountRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccountResponse' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /accounts/{accountNumber}:
    get:
      tags: [Accounts]
      summary: Get an account by number
      operationId: getAccountByNumber
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccountResponse' }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    put:
      tags: [Accounts]
      summary: Update an account (full)
      operationId: updateAccount
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AccountRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccountResponse' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    delete:
      tags: [Accounts]
      summary: Delete an account
      operationId: deleteAccount
      parameters:
        - name: accountNumber
          in: path
          required: true
          schema: { type: string }
      responses:
        '204': { description: No Content }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /transactions:
    get:
      tags: [Transactions]
      summary: List transactions
      operationId: listTransactions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/TransactionResponse' }
    post:
      tags: [Transactions]
      summary: Create a transaction
      operationId: createTransaction
      description: >
        Credits must be positive; debits must be negative.
        The available balance must be stored on each transaction.
        If a debit would make the balance negative, return INSUFFICIENT_FUNDS.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TransactionRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TransactionResponse' }
        '400':
          description: Business rule violation
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /transactions/{transactionId}:
    get:
      tags: [Transactions]
      summary: Get a transaction by ID
      operationId: getTransactionById
      parameters:
        - name: transactionId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TransactionResponse' }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    put:
      tags: [Transactions]
      summary: Update a transaction (full)
      operationId: updateTransaction
      parameters:
        - name: transactionId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TransactionRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TransactionResponse' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
    delete:
      tags: [Transactions]
      summary: Delete a transaction
      operationId: deleteTransaction
      parameters:
        - name: transactionId
          in: path
          required: true
          schema: { type: string }
      responses:
        '204': { description: No Content }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /reports:
    get:
      tags: [Reports]
      summary: Get account statement for a customer in a date range
      operationId: getAccountStatement
      parameters:
        - name: customerId
          in: query
          required: true
          schema: { type: string }
        - name: startDate
          in: query
          required: true
          description: Inclusive start date (YYYY-MM-DD)
          schema: { type: string, format: date }
        - name: endDate
          in: query
          required: true
          description: Inclusive end date (YYYY-MM-DD)
          schema: { type: string, format: date }
      responses:
        '200':
          description: OK - returns JSON summary and a base64-encoded PDF
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AccountStatement' }
        '400':
          description: Bad Request
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '404':
          description: Not Found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

components:
  schemas:
    Person:
      type: object
      properties:
        name:            { type: string }
        gender:          { type: string }
        age:             { type: integer, format: int32 }
        identification:  { type: string }
        address:         { type: string }
        phone:           { type: string }
      required: [name, gender, age, identification, address, phone]

    CustomerRequest:
      allOf:
        - $ref: '#/components/schemas/Person'
        - type: object
          properties:
            password: { type: string }
            enabled:  { type: boolean }
          required: [password, enabled]

    CustomerResponse:
      allOf:
        - $ref: '#/components/schemas/Person'
        - type: object
          properties:
            customerId: { type: string }
            password:   { type: string }
            enabled:    { type: boolean }
          required: [customerId, password, enabled]

    AccountRequest:
      type: object
      properties:
        accountType:     { type: string }
        initialBalance:  { type: number, format: double }
        enabled:         { type: boolean }
        customerId:      { type: string }
      required: [accountType, initialBalance, enabled, customerId]

    AccountResponse:
      type: object
      properties:
        accountNumber:   { type: string }
        accountType:     { type: string }
        initialBalance:  { type: number, format: double }
        enabled:         { type: boolean }
        customerId:      { type: string }
      required: [accountNumber, accountType, initialBalance, enabled, customerId]

    TransactionRequest:
      type: object
      properties:
        accountNumber:    { type: string }
        date:             { type: string, format: date }
        transactionType:  { type: string, enum: [CREDIT, DEBIT] }
        amount:           { type: number, format: double, description: 'CREDIT > 0, DEBIT < 0' }
      required: [accountNumber, date, transactionType, amount]

    TransactionResponse:
      type: object
      properties:
        transactionId:    { type: string }
        accountNumber:    { type: string }
        date:             { type: string, format: date }
        transactionType:  { type: string, enum: [CREDIT, DEBIT] }
        amount:           { type: number, format: double }
        availableBalance: { type: number, format: double }
      required: [transactionId, accountNumber, date, transactionType, amount, availableBalance]

    AccountStatement:
      type: object
      properties:
        customer:
          type: object
          properties:
            customerId: { type: string }
            name:       { type: string }
        dateRange:
          type: object
          properties:
            start: { type: string, format: date }
            end:   { type: string, format: date }
        accounts:
          type: array
          items:
            type: object
            properties:
              accountNumber:   { type: string }
              accountType:     { type: string }
              initialBalance:  { type: number, format: double }
              transactions:
                type: array
                items:
                  type: object
                  properties:
                    date:             { type: string, format: date }
                    transactionType:  { type: string, enum: [CREDIT, DEBIT] }
                    amount:           { type: number, format: double }
                    availableBalance: { type: number, format: double }
              totals:
                type: object
                properties:
                  totalDebits:  { type: number, format: double }
                  totalCredits: { type: number, format: double }
        pdfBase64:
          type: string
          description: Base64-encoded PDF of the statement
      required: [customer, dateRange, accounts, pdfBase64]

    Error:
      type: object
      properties:
        code:
          type: string
          enum: [VALIDATION_ERROR, NOT_FOUND, INSUFFICIENT_FUNDS]
        message:
          type: string
          description: Human-readable message (you can localize it, e.g., "Saldo no disponible")
      required: [code, message]
