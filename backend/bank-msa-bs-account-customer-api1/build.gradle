import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'jacoco'
    id 'java'
    id 'org.springframework.boot' version '3.4.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.openapi.generator' version '7.9.0'
}

def packageName = "com.bank.msa.bs.account.customer.api"

springBoot {
    mainClass = "com.bank.msa.bs.account.customer.api.OptimusMainApplication"
}


group = "com.bank.bs"
version = "1.0.0"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    protobufJavaVersion = "4.30.2"
    protobufJavaUtilVersion = "4.30.2"
}


dependencies {

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    //dependency Base
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //dependencies for default
    implementation "org.springframework:spring-beans:6.2.10"
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    implementation 'org.springframework.boot:spring-boot-starter-web'



    // dependency from optimus
    compileOnly group: "org.projectlombok" , name: "lombok" , version: ""
    implementation group: "org.mapstruct" , name: "mapstruct" , version: "1.6.2"
    annotationProcessor group: "org.mapstruct" , name: "mapstruct-processor" , version: "1.6.2"

    // dependency from BDD PostgreSQL
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation group: "org.postgresql" , name: "postgresql" , version: "42.7.7"

    //test
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "io.projectreactor:reactor-test"
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.xmlunit:xmlunit-core:2.10.0"

    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'com.itextpdf:itext7-core:7.2.5'
}

tasks.register('buildSpringServer', GenerateTask) {
    generatorName = "spring"
    inputSpec = "$rootDir/src/main/resources/openapi.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "${packageName}.infrastructure.input.adapter.rest"
    modelPackage = "${packageName}.infrastructure.input.adapter.rest.models"
    library = "spring-boot"
    configOptions = [
            useSpringBoot3                          : "true",
            useJakartaEe                            : "true",
            serializableModel                       : "true",
            dateLibrary                             : "java8",
            openApiNullable                         : "false",
            apiFirst                                : "false",
            delegatePattern                         : "true",
            configPackage                           : "${packageName}.config",
            sourceFolder                            : "src/main/java",
            basePackage                             : "${packageName}",
            disallowAdditionalPropertiesIfNotPresent: "true",
            interfaceOnly                           : "true"
    ]
}


tasks.register('optimusCreateUnitTest', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "com.com.bank.msa.bs.account.customer.api.test.core.ProcessMain"
}

compileJava {
    dependsOn buildSpringServer
    options.compilerArgs += [
            "-Amapstruct.suppressGeneratorTimestamp=true",
            "-Amapstruct.suppressGeneratorVersionInfoComment=true",
            "-Amapstruct.verbose=true",
            "-Amapstruct.defaultComponentModel=spring"
    ]
}

sourceSets.main.java.srcDirs = ["$buildDir/generated/src/main/java", "src/main/java"]

springBoot{
    buildInfo()
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        xml.outputLocation = file("$buildDir/jacoco/test.xml")
        html.outputLocation = file("$buildDir/jacoco/index.html")
        html.required = true
        csv.required = true
    }
}
